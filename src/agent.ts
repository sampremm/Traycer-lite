import type { PlanStep } from "./planner";
import * as child from "child_process";
import { safeWriteFile, nowIso } from "./utils";
import * as path from "path";

export type AgentResult = {
  stepId: string;
  ok: boolean;
  message?: string;
  data?: any;
};

export interface Agent {
  // run step in either simulate mode or execute
  run(step: PlanStep, execute: boolean): Promise<AgentResult>;
}

/* CodeAgent: writes a simple TypeScript stub file */
export class CodeAgent implements Agent {
  async run(step: PlanStep, execute: boolean): Promise<AgentResult> {
    const filename = step.metadata?.filename || `src/${step.id}.ts`;
    const content = makeStub(step.detail, step.title);
    if (!execute) {
      return {
        stepId: step.id,
        ok: true,
        message: `(simulate) would write file: ${filename}`,
        data: { filename, content }
      };
    }
    safeWriteFile(filename, content);
    return {
      stepId: step.id,
      ok: true,
      message: `Wrote file: ${filename}`,
      data: { filename }
    };
  }
}

/* DocAgent: writes a README note describing the design */
export class DocAgent implements Agent {
  async run(step: PlanStep, execute: boolean) {
    const file = `TRAYCER_PLAN.md`;
    const content = `# Plan generated at ${nowIso()}\n\n- ${step.title}\n\n${step.detail}\n`;
    if (!execute) {
      return { stepId: step.id, ok: true, message: `(simulate) would append to ${file}` , data: { file, content } };
    }
    // append file
    safeWriteFile(file, content);
    return { stepId: step.id, ok: true, message: `Wrote plan note to ${file}`, data: { file } };
  }
}

/* TestAgent: create a basic test file (doesn't execute real test runner) */
export class TestAgent implements Agent {
  async run(step: PlanStep, execute: boolean) {
    const testFile = step.metadata?.testFile || `tests/${step.id}.test.ts`;
    const content = `// simple test stub\nconsole.log("Running test for ${step.title}...");\n`;
    if (!execute) {
      return { stepId: step.id, ok: true, message: `(simulate) would create test: ${testFile}`, data: { testFile, content } };
    }
    safeWriteFile(testFile, content);
    return { stepId: step.id, ok: true, message: `Created test file ${testFile}`, data: { testFile } };
  }
}

/* ShellAgent: run commands (careful!) */
export class ShellAgent implements Agent {
  async run(step: PlanStep, execute: boolean) {
    const cmd = step.detail.includes("test") ? "echo 'no tests configured - simulation'" : "echo 'no-op'";
    if (!execute) {
      return { stepId: step.id, ok: true, message: `(simulate) would run: ${cmd}`, data: { cmd } };
    }
    try {
      const out = child.execSync(cmd, { encoding: "utf-8" });
      return { stepId: step.id, ok: true, message: `Command output: ${out}`, data: { out } };
    } catch (err: any) {
      return { stepId: step.id, ok: false, message: `Command failed: ${err.message}` };
    }
  }
}

function makeStub(detail: string, title: string) {
  const moduleName = title.replace(/\s+/g, "");
  return `// Auto-generated by traycer-lite
export function ${safeName(moduleName)}() {
  // ${detail}
  return { message: "stub from traycer-lite" };
}
`;
}

function safeName(s: string) {
  return s.replace(/[^a-zA-Z0-9_$]/g, "_");
}
